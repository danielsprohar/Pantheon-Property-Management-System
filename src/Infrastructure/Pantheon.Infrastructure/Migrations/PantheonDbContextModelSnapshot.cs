// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pantheon.Infrastructure.Data;

namespace Pantheon.Infrastructure.Migrations
{
    [DbContext(typeof(PantheonDbContext))]
    partial class PantheonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pantheon.Core.Domain.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            FirstName = "Alice",
                            Gender = "F",
                            LastName = "Smite",
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PhoneNumber = "555-555-5555"
                        });
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.CustomerRentalAgreement", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("RentalAgreementId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "RentalAgreementId");

                    b.HasIndex("RentalAgreementId");

                    b.ToTable("CustomerRentalAgreements");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            RentalAgreementId = 1
                        });
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.CustomerVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("LicensePlateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicensePlateState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerVehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "blue",
                            CustomerId = 1,
                            LicensePlateNumber = "1234-ASD",
                            LicensePlateState = "Texas",
                            Make = "Ford",
                            Model = "Mustang GT",
                            Year = 2007
                        });
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BillingPeriodEnd")
                        .HasColumnType("DATE");

                    b.Property<DateTime>("BillingPeriodStart")
                        .HasColumnType("DATE");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("DATE");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvoiceStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("RentalAgreementId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceStatusId");

                    b.HasIndex("RentalAgreementId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingPeriodEnd = new DateTime(2020, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BillingPeriodStart = new DateTime(2020, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DueDate = new DateTime(2020, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            InvoiceStatusId = 1,
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RentalAgreementId = 1
                        });
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.InvoiceLine", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ParkingSpaceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.HasKey("InvoiceId", "ParkingSpaceId");

                    b.HasIndex("ParkingSpaceId");

                    b.ToTable("InvoiceLine");

                    b.HasData(
                        new
                        {
                            InvoiceId = 1,
                            ParkingSpaceId = 1,
                            Description = "Space #1; monthly rate of $400.00; electricity and water are included.",
                            Price = 400m,
                            Quantity = 1,
                            Total = 400m
                        });
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.InvoicePayment", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId", "PaymentId");

                    b.HasIndex("PaymentId");

                    b.ToTable("InvoicePayments");
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.InvoiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("InvoiceStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "awaiting payment"
                        },
                        new
                        {
                            Id = 2,
                            Description = "bad debt"
                        },
                        new
                        {
                            Id = 3,
                            Description = "draft"
                        },
                        new
                        {
                            Id = 4,
                            Description = "paid"
                        },
                        new
                        {
                            Id = 5,
                            Description = "past due"
                        },
                        new
                        {
                            Id = 6,
                            Description = "partial"
                        },
                        new
                        {
                            Id = 7,
                            Description = "void"
                        });
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.ParkingSpace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Amps")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsAvailable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<int>("ParkingSpaceTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("RecurringRate")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParkingSpaceTypeId");

                    b.ToTable("ParkingSpaces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "1",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 2,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "2",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 3,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "3",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 4,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "4",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 5,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "5",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 6,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "6",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 7,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "7",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 8,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "8",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 9,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "9",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 10,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "10",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 11,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "11",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 12,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "12",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 13,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "13",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 14,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "14",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 15,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "15",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 16,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "16",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 17,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "17",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 18,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "18",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 19,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "19",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 20,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "20",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 21,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "21",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 22,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "22",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 23,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "23",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 24,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "24",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 25,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "25",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 26,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "26",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 27,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "27",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 28,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "28",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 29,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "29",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 30,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "30",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 31,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "31",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        },
                        new
                        {
                            Id = 32,
                            Amps = 30,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "32",
                            ParkingSpaceTypeId = 1,
                            RecurringRate = 400m
                        });
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.ParkingSpaceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SpaceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("ParkingSpaceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SpaceType = "rv_space"
                        },
                        new
                        {
                            Id = 2,
                            SpaceType = "mobile_home_space"
                        },
                        new
                        {
                            Id = 3,
                            SpaceType = "house"
                        });
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsRefund")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Method = "cash"
                        },
                        new
                        {
                            Id = 2,
                            Method = "check"
                        },
                        new
                        {
                            Id = 3,
                            Method = "credit"
                        },
                        new
                        {
                            Id = 4,
                            Method = "debit"
                        },
                        new
                        {
                            Id = 5,
                            Method = "money_order"
                        });
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.RentalAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("ParkingSpaceId")
                        .HasColumnType("int");

                    b.Property<int>("RecurringDueDate")
                        .HasColumnType("int");

                    b.Property<int>("RentalAgreementTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("TerminatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ParkingSpaceId");

                    b.HasIndex("RentalAgreementTypeId");

                    b.ToTable("RentalAgreements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedBy = new Guid("5b628641-23b1-4aa3-99e0-a07bb3e5c4db"),
                            ModifiedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ParkingSpaceId = 1,
                            RecurringDueDate = 1,
                            RentalAgreementTypeId = 2
                        });
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.RentalAgreementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgreementType")
                        .IsRequired()
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("RentalAgreementTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgreementType = "daily"
                        },
                        new
                        {
                            Id = 2,
                            AgreementType = "monthly"
                        },
                        new
                        {
                            Id = 3,
                            AgreementType = "weekly"
                        });
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.Customer", b =>
                {
                    b.OwnsOne("Pantheon.Core.Domain.Models.CustomerDriverLicense", "DriverLicense", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("nvarchar(32)")
                                .HasMaxLength(32);

                            b1.Property<string>("PhotoUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(32)")
                                .HasMaxLength(32);

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.CustomerRentalAgreement", b =>
                {
                    b.HasOne("Pantheon.Core.Domain.Models.Customer", "Customer")
                        .WithMany("CustomerRentalAgreements")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pantheon.Core.Domain.Models.RentalAgreement", "RentalAgreement")
                        .WithMany("CustomerRentalAgreements")
                        .HasForeignKey("RentalAgreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.CustomerVehicle", b =>
                {
                    b.HasOne("Pantheon.Core.Domain.Models.Customer", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.Invoice", b =>
                {
                    b.HasOne("Pantheon.Core.Domain.Models.InvoiceStatus", "InvoiceStatus")
                        .WithMany()
                        .HasForeignKey("InvoiceStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pantheon.Core.Domain.Models.RentalAgreement", "RentalAgreement")
                        .WithMany("Invoices")
                        .HasForeignKey("RentalAgreementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.InvoiceLine", b =>
                {
                    b.HasOne("Pantheon.Core.Domain.Models.Invoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pantheon.Core.Domain.Models.ParkingSpace", "ParkingSpace")
                        .WithMany()
                        .HasForeignKey("ParkingSpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.InvoicePayment", b =>
                {
                    b.HasOne("Pantheon.Core.Domain.Models.Invoice", "Invoice")
                        .WithMany("InvoicePayments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pantheon.Core.Domain.Models.Payment", "Payment")
                        .WithMany("InvoicePayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.ParkingSpace", b =>
                {
                    b.HasOne("Pantheon.Core.Domain.Models.ParkingSpaceType", "ParkingSpaceType")
                        .WithMany()
                        .HasForeignKey("ParkingSpaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.Payment", b =>
                {
                    b.HasOne("Pantheon.Core.Domain.Models.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pantheon.Core.Domain.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Pantheon.Core.Domain.Models.RentalAgreement", b =>
                {
                    b.HasOne("Pantheon.Core.Domain.Models.ParkingSpace", "ParkingSpace")
                        .WithMany()
                        .HasForeignKey("ParkingSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pantheon.Core.Domain.Models.RentalAgreementType", "RentalAgreementType")
                        .WithMany()
                        .HasForeignKey("RentalAgreementTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
